Basic instructions to run the Dirac Hartree-Fock code.

Can start from moldft or a previous DFdriver calculation.  There is nearly working functionality to restart from NWChem (look at readnw() in InitParamters.h) that would have multiple advantages, though note that moldft can be started from NWChem.

1) Be atom starting from moldft

Run moldft with
---------
dft
 xc hf
end

geometry
 be 0 0 0
end
---------

Then run DFdriver with
---------
DiracFock
  archive be.restartdata
  small 1e-5
  thresh 1e-6
  kain
  maxsub 5
  no_save
end
---------

List of interesting input options (from DFParameters.h)

          std::string archive;         ///< Name of input archive to read in ground state
          int max_iter;                ///< Maximum number of iterations
          double small;                ///< Minimum length scale to be resolved
          double thresh;               ///< Accuracy criterion when truncating
          int k;                       ///< Number of legendre polynomials in scaling basis
          bool kain;                   ///< Turns on KAIN nonlinear solver 
          int maxsub;                  ///< Sets maximum subspace size for KAIN
          double maxrotn;              ///< maximum step allowed by kain
          bool restart;                ///< Indicates this is a restarted DF job
          int nucleus;                 ///< Indicates which nucleus model to use (1 for fermi, 2 for point, anything else for Gaussian)
          bool do_save;                ///< Whether or not to save after each iteration. Defaults to true. Turn off with 'no_save'
          std::string savefile;        ///< Gives the file to save the archive each iteration Default: DFrestartdata (in working directory)
          int lb_iter;                 ///< How many iterations to load balance (after the initial load balancing)
          bool lineplot;               ///< Whether or not to make lineplots at the end of the job
          bool no_compute;             ///< If true, will skip all computation
          double bohr_rad;             ///< bohr radius in fm (default: 52917.7210544)
          int min_iter;                ///< minimum number of iterations (default: 2)

(Kramers restricted does not seem to be working --- bug in the exchange piece?)

