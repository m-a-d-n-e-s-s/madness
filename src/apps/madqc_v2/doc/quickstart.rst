MADNESS-QCEngine Documentation
==============================

Purpose
-------

To provide a single executable for running chemistry applications. This will be the main executable used within QCEngine.

Current Functionality
---------------------

- **hf/dft**
  - geometry optimization
- **linear response**
  - excited states
  - dipole
  - nuclear
- **response properties**
  - polarizability
  - hyperpolarizability
  - gradients of excited states and response states - optimized for excited states

The executable is designed to be a single executable that can be used to run all of the above from either an input file in the MADNESS format or JSON input.

Examples
--------


Use case 1: Optimize MP2 geometry

.. code-block:: bash

    task
        driver "optimize"
        method "mp2"
    end

    geometry
        eprec 0.0001
        field [0.0,0.0,0.0]
        no_orient false
        psp_calc false
        pure_ae true
        symtol -0.01
        H 0 0 0
        H 0 0 0.7414
    end

    dft
        xc hf
        econv 1e-5
        protocol [1e-4,1e-5]
        localize new
    end

In JSON format:

.. code-block:: json

    {
        "dft": {
            "econv": 1e-5,
            "protocol": [
                1e-4,
                1e-5
            ],
            "xc": "hf"
        },
        "geometry": {
            "eprec": 0.0001,
            "field": [
                0.0,
                0.0,
                0.0
            ],
            "no_orient": false,
            "psp_calc": false,
            "pure_ae": true,
            "symtol": -0.01,
            "symbols": [
                "H",
                "H"
            ],
            "geometry": [
                [
                    0.0,
                    0.0,
                    0.0
                ],
                [
                    0.0,
                    0.0,
                    0.7414
                ]
            ]
        },
        "task": {
            "driver": "optimize",
            "method": "mp2"
        }
    }

In order to run the calculation, use the following command:

.. code-block:: bash

    madqc input 
    madqc input.json
    mpirun -np 4 madqc input
    mpirun -np 4 madqc input.json

Use case 2: Compute the polarizability and hyperpolarizability of H2
--------------------------------------------------------------------

.. code-block:: bash

    task 
        driver "property"
        method "tddft"
    end

    property
        polarizability true
        excited-state false
        # num_excited_states 4
        hyperpolarizability true
        freq_range [0.0,0.056,0.1]
    end


    geometry
        eprec 0.0001
        no_orient true
        H 0 0 0
        H 0 0 0.7414
    end

    dft
        xc hf
        econv 1e-5
        protocol [1e-4,1e-5]
        localize new
    end

    tddft
        xc "hf"
        econv 1e-5
        protocol [1e-4,1e-5]
        freq_range [0.0,0.056,0.1]
        perturbations ["dipole"]
        excited-state false
        localize new
    end

Use case 3a: Optimize excite-state structure
-------------------------------------------

.. code-block:: bash

    task
        driver "optimize"
        method "tddft"
    end

    geometry
        eprec 0.0001
        field [0.0,0.0,0.0]
        no_orient false
        psp_calc false
        pure_ae true
        symtol -0.01
        H 0 0 0
        H 0 0 0.7414
    end

    dft
        xc hf
        econv 1e-5
        protocol [1e-4,1e-5]
        localize new
    end

    tddft
        excited-state true
        num_excited_states 4
    end

Use case 3b: Optimize frequency response structure

.. code-block:: bash

    task
        driver "optimize"
        method "tddft"
    end

    geometry
        eprec 0.0001
        field [0.0,0.0,0.0]
        no_orient false
        psp_calc false
        pure_ae true
        symtol -0.01
        H 0 0 0
        H 0 0 0.7414
    end

    dft
        xc hf
        econv 1e-5
        protocol [1e-4,1e-5]
        localize new
    end

    tddft
        # excited-state true
        # num_excited_states 4
        freq_range [0.0,0.056,0.1]
        perturbations ["dipole"]
    end

The optimization block will optimize whatever is generated by the method block. In this case, the method block is tddft, so the optimization block will optimize the excited state structure or frequency response structure, or both

Use case 4: Second-Harmonic Generation 
--------------------------------------

.. code-block:: bash

    task
        driver "property"
        method "tddft"
    end

    property
        shg true
    end

    geometry
        eprec 0.0001
        field [0.0,0.0,0.0]
        no_orient false
        psp_calc false
        pure_ae true
        symtol -0.01
        H 0 0 0
        H 0 0 0.7414
    end

    dft
        xc hf
        econv 1e-5
        protocol [1e-4,1e-5]
        localize new
    end

    # if shg is true, then the following must be included
    tddft
        excited-state true
        num_states 4
        # will trigger the linear response equal to half the excited state frequencies
        freq_range [omega_1/2,omega_2/2,omega_3/2,omega_4/2]
        perturbations ["dipole"]
    end


**H2 Dipole frequency response calculation with hyperpolarizability calculation**

.. code-block:: bash

    dft
        econv 0.01
        protocol [0.0001]
    end

    response
        dipole true
        first_order true
        freq_range [0.0,0.056,0.1]
        kain true
        maxiter 10
        maxsub 10
        omega 0.0
        protocol [0.0001]
        quadratic true
    end

    geometry
        eprec 0.0001
        field [0.0,0.0,0.0]
        no_orient false
        psp_calc false
        pure_ae true
        symtol -0.01
        H 0 0 0
        H 0 0 0.7414
    end

Or in JSON format:

.. code-block:: json

    {
        "dft": {
            "econv": 0.01,
            "protocol": [
                0.0001
            ]
        },
        "molecule": {
            "geometry": [
                [
                    0.0,
                    0.0,
                    0.0
                ],
                [
                    0.0,
                    0.0,
                    0.7414
                ]
            ],
            "parameters": {
                "eprec": 0.0001,
                "field": [
                    0.0,
                    0.0,
                    0.0
                ],
                "no_orient": false,
                "psp_calc": false,
                "pure_ae": true,
                "symtol": -0.01
            },
            "symbols": [
                "H",
                "H"
            ]
        },
        "response": {
            "dipole": true,
            "first_order": true,
            "freq_range": [
                0.0,
                0.056,
                0.1
            ],
            "kain": true,
            "maxiter": 10,
            "maxsub": 10,
            "omega": 0.0,
            "protocol": [
                0.0001
            ],
            "quadratic": true
        }
    }

To run the calculation, use the following command:

.. code-block:: bash

    maddft input 
    maddft input.json

as well as in parallel:

.. code-block:: bash

    mpirun -np 4 maddft input
    mpirun -np 4 maddft input.json

The outputs will be stored in a directory called `output` in the current working directory.

Linear Response Directories
---------------------------

Since each response calculation is independent they are placed in separate directories with the following naming convention:

``[perturbation]_[frequency]`` so for example the dipole response at 0.056 would be in the directory ``dipole_0-056000``








